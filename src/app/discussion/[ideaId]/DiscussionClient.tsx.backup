"use client"

import { useState, useEffect } from "react"
import { useToast } from "@/components/ui/use-toast"
import { useAuth } from "@/lib/auth"

// Import components
import IdeaHeader from "./components/IdeaHeader"
import IdeaDetails from "./components/IdeaDetails"
import CommentForm from "./components/CommentForm"
import CommentsList from "./components/CommentsList"

// Import types and API functions
import { Idea, Comment } from "./components/types"
import { 
  fetchComments, 
  checkIdeaLikeStatus, 
  fetchLikedComments,
  likeIdea, 
  likeComment, 
  postComment 
} from "./components/api"

interface DiscussionClientProps {
  idea: Idea
  initialComments: Comment[]
}

export default function DiscussionClient({ idea, initialComments }: DiscussionClientProps) {
  const { toast } = useToast()
  const { user } = useAuth()
  const [comments, setComments] = useState<Comment[]>(initialComments)
  const [replyingTo, setReplyingTo] = useState<string | null>(null)
  const [expandedComments, setExpandedComments] = useState<Record<string, boolean>>({})
  const [ideaLikes, setIdeaLikes] = useState(idea.likes)
  const [hasLiked, setHasLiked] = useState(false)
  const [commentLikes, setCommentLikes] = useState<Record<string, boolean>>({})

  useEffect(() => {
    // Fetch comments on mount
    const loadComments = async () => {
      try {
        const data = await fetchComments(idea.id)
        setComments(data)
      } catch (error) {
        toast({ title: "Error", description: "Failed to load comments." })
      }
    }
    
    loadComments()
    
    // Check user's like status
    if (user?.id) {
      const checkLikeStatus = async () => {
        try {
          // Check idea like status
          const ideaLiked = await checkIdeaLikeStatus(idea.id, user.id)
          setHasLiked(ideaLiked)
          
          // Check comment likes
          const likedComments = await fetchLikedComments(idea.id, user.id)
          const likedCommentsMap: Record<string, boolean> = {}
          likedComments.forEach((commentId: string) => {
            likedCommentsMap[commentId] = true
          })
          setCommentLikes(likedCommentsMap)
        } catch (error) {
          console.error("Failed to check like status:", error)
        }
      }
      
      checkLikeStatus()
    }
  }, [idea.id, user?.id, toast])

  // Handler for liking/unliking an idea
  const handleLikeIdea = async () => {
    if (!user) {
      toast({ title: "Authentication Required", description: "Please sign in to like ideas." })
      return
    }
    
    const action = hasLiked ? "unlike" : "like"
    try {
      const data = await likeIdea(idea.id, user.id, action)
      setIdeaLikes(data.likes)
      setHasLiked(!hasLiked)
    } catch (error) {
      toast({ title: "Error", description: "Failed to update like." })
    }
  }
  
  // Handler for liking/unliking a comment
  const handleLikeComment = async (commentId: string) => {
    if (!user) {
      toast({ title: "Authentication Required", description: "Please sign in to like comments." })
      return
    }
    
    const isLiked = commentLikes[commentId]
    const action = isLiked ? "unlike" : "like"
    try {
      const data = await likeComment(idea.id, commentId, user.id, action)
      setCommentLikes((prev) => ({ ...prev, [commentId]: !isLiked }))
      setComments((prev) => prev.map(c =>
        c.id === commentId ? { ...c, likes: data.likes } : c
      ))
    } catch (error) {
      toast({ title: "Error", description: "Failed to update comment like." })
    }
  }

  // Handler for replying to a comment
  const handleReply = (parentId: string) => {
    setReplyingTo(parentId === replyingTo ? null : parentId)
  }
  
  // Handler for submitting a new comment
  const handleSubmitComment = async (content: string) => {
    if (!user) {
      toast({ title: "Authentication Required", description: "Please sign in to post comments." })
      return
    }
    
    try {
      const newComment = await postComment(idea.id, user.id, content)
      setComments((prev) => [...prev, { ...newComment, replies: [] }])
      toast({ title: "Comment posted", description: "Your comment has been added to the discussion." })
    } catch (error) {
      toast({ title: "Error", description: "Failed to post comment." })
    }
  }

  // Handler for submitting a reply to a comment
  const handleSubmitReply = async (parentId: string, content: string) => {
    if (!user) {
      toast({ title: "Authentication Required", description: "Please sign in to post replies." })
      return
    }
    
    try {
      const newReply = await postComment(idea.id, user.id, content, parentId)
      
      // Update comments state to add the reply to the correct parent
      const addReply = (comments: Comment[]): Comment[] =>
        comments.map(comment =>
          comment.id === parentId
            ? { ...comment, replies: [...(comment.replies || []), newReply] }
            : { ...comment, replies: comment.replies ? addReply(comment.replies) : [] }
        )
        
      setComments(prev => addReply(prev))
      setReplyingTo(null)
      toast({ title: "Reply posted", description: "Your reply has been added to the discussion." })
    } catch (error) {
      toast({ title: "Error", description: "Failed to post reply." })
    }
  }
  
  // Handler for toggling comment expansion
  const handleToggleExpand = (commentId: string) => {
    setExpandedComments(prev => ({
      ...prev,
      [commentId]: !prev[commentId]
    }))
  }

  return (
    <div className="flex min-h-screen flex-col">
      <main className="flex-1">
        <section className="bg-[#0a1e42] py-8 text-white md:py-12">
          <div className="container mx-auto px-4">
            <Link href="/odrlabs" className="mb-6 inline-flex items-center text-gray-200 hover:text-white">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to ODR Labs
            </Link>
            <div className="mx-auto max-w-4xl">
              <h1 className="mb-4 text-2xl font-bold tracking-tight md:text-3xl lg:text-4xl">
                {idea.description.split('.')[0]}
              </h1>
              <div className="flex flex-wrap items-center gap-x-6 gap-y-2 text-sm text-gray-300">
                <div>Posted by {idea.name}</div>
                <div>From {idea.country}</div>
                <div>{format(new Date(idea.submittedAt), "MMMM d, yyyy")}</div>
              </div>
            </div>
          </div>
        </section>
        
        <section className="py-8">
          <div className="container mx-auto px-4">
            <div className="mx-auto max-w-4xl">
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-xl text-[#0a1e42]">Idea Details</CardTitle>
                    {user ? (
                      <Button 
                        variant={hasLiked ? "default" : "outline"}
                        size="sm"
                        onClick={handleLikeIdea}
                        className={hasLiked ? "bg-[#0a1e42] hover:bg-[#263e69]" : ""}
                      >
                        <ThumbsUp className="mr-2 h-4 w-4" />
                        {ideaLikes}
                      </Button>
                    ) : (
                      <div className="flex items-center text-sm text-gray-500">
                        <ThumbsUp className="mr-2 h-4 w-4" />
                        <span>{ideaLikes}</span>
                      </div>
                    )}
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="prose max-w-none">
                    <p>{idea.description}</p>
                    <div className="mt-6">
                      <Link href={`/discussion/${idea.id}/workplace`}>
                        <Button className="bg-[#0a1e42] hover:bg-[#263e69]">
                          Join Idea Workplace Meeting
                        </Button>
                      </Link>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <div className="mt-8">
                <h2 className="mb-4 text-xl font-bold text-[#0a1e42]">Discussion</h2>
                
                <div className="mb-6 flex gap-3">
                  <Avatar className="h-10 w-10">
                    <AvatarFallback className="bg-[#0a1e42] text-white">
                      {user ? getInitials(user.name) : "?"}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    {user ? (
                      <>
                        <div className="mb-1 text-sm text-gray-500">
                          Commenting as <span className="font-medium text-gray-700">{user.name}</span>
                        </div>
                        <Textarea
                          placeholder="Share your thoughts on this idea..."
                          value={commentContent}
                          onChange={(e) => setCommentContent(e.target.value)}
                          className="mb-2 resize-none"
                        />
                        <div className="flex justify-end">
                          <Button 
                            onClick={submitComment}
                            className="bg-[#0a1e42] hover:bg-[#263e69]"
                            disabled={!commentContent.trim()}
                          >
                            Post Comment
                          </Button>
                        </div>
                      </>
                    ) : (
                      <div className="rounded-lg border border-gray-200 p-4 text-center">
                        <p className="text-gray-600">Please sign in to join the discussion.</p>
                        <Link href="/signin" className="mt-2 inline-block text-sm text-blue-500 hover:text-blue-700">
                          Sign in
                        </Link>
                      </div>
                    )}
                  </div>
                </div>
                
                {comments.length > 0 ? (
                  <div className="space-y-6">
                    {comments.map((comment) => (
                      <CommentThread key={comment.id} comment={comment} />
                    ))}
                  </div>
                ) : (
                  <div className="rounded-lg border-2 border-dashed border-gray-200 p-12 text-center">
                    <p className="text-gray-500">No comments yet. Be the first to start the discussion!</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </section>
      </main>

    </div>
  )
}
