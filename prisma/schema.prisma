generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MENTOR
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  country   String?
  userType  String?
  institution String?
  
  // User can have multiple ideas and comments
  ideas       Idea[]
  submissions IdeaSubmission[]
  comments    Comment[]
}

model IdeaSubmission {
  id            String   @id @default(uuid())
  title         String
  ideaCaption   String
  description   String
  odrExperience String
  consent       Boolean
  approved      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationship to approved Idea
  ideaId        String?
  idea          Idea?    @relation(fields: [ideaId], references: [id])
  
  // Relationship to user who submitted the idea
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  // Admin moderation
  reviewedAt    DateTime?
  reviewedBy    String?
}

model Idea {
  id                String         @id @default(uuid())
  title             String
  caption           String?
  description       String         @db.Text
  
  // Relationship to user who owns the idea
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  
  // Relationships
  submission        IdeaSubmission[]
  comments          Comment[]
  
  // Engagement metrics
  views             Int            @default(0)
  likes             Int            @default(0)
  
  // Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Status - approved ideas are shown on ODR Labs page
  approved          Boolean        @default(false)
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  likes      Int      @default(0)
  
  // Relationships
  ideaId     String
  idea       Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  
  // For threaded/nested comments
  parentId   String?
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
}

